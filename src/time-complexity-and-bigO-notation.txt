Time complexity -: The time taken by algorithm as a function of the length of input 

arr = [1, 2, 3, 4]

function find(value, arr) {
  for(iterator of arr) {
    if (iterator === value) {
      return true
    }
  }
  return false
}
find(5, arr)

Big-O notation of find function is -: O(n)

f(n) = 3n^3 + 5n -> O(n^3)
f(n) = n + 100log(n) -> O(n)
f(n) = 3n^3 + 4n^5 -> O(n^5)
f(n) = 10000 -> O(1)

Demo function -:

function fn(n){
  if( n == 0) {
    return 0
  }

  for(i = 0; i < 10; i++){
    ----------------
    -----------
    -------
    ----
    -
  }
  fn(n/2)
  fn(n/2)
}

T(n) = 2 * T(n/2) + nc

       nc -> nc
      /   \
    n/2*c   n/2*c -> nc
   /    \    /   \
n/4*c n/4*c n/4*c n/4*c -> nc

height -> log(n)
O(nclog(n)) -> O(nlog(n))

Q1. T(n) = T(n/4) + T(n/2) + c

Q2. T(n) = 2T(n-1) + c